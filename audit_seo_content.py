"""
Audit generated SEO markdown pages to detect fallback, low-quality, or incomplete content.
Searches for telltale signs like fallback markers, missing metadata, or boilerplate text.
"""

import re
from pathlib import Path

CONTENT_DIR = Path("content")
SUSPECT_PATTERNS = [
    r"FALLBACK",                         # Claude fallback flag
    r"Error calling Claude",             # API error message
    r"Lorem ipsum",                      # Placeholder Latin
    r"Generated by Claude",             # Generic tag
    r"Explore .* with lyrics",          # Weak default descriptions
    r"This content was automatically generated",  # Weak intros
    r"\{\{.*\}\}",                       # Unrendered template tags
]

def find_low_quality_pages():
    flagged = []
    for md_file in CONTENT_DIR.rglob("*.md"):
        text = md_file.read_text(encoding="utf-8", errors="ignore")
        for pattern in SUSPECT_PATTERNS:
            if re.search(pattern, text, flags=re.IGNORECASE):
                flagged.append(str(md_file))
                break

    if flagged:
        print(f"FLAGGED: Found {len(flagged)} potentially low-quality files:")
        for path in flagged:
            print(f" - {path}")
    else:
        print("CLEAN: No fallback or placeholder content detected.")

if __name__ == "__main__":
    find_low_quality_pages()